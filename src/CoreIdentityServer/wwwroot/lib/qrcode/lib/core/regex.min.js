/**
 * Minified by jsDelivr using Terser v5.9.0.
 * Original file: /npm/qrcode@1.5.0/lib/core/regex.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
const numeric="[0-9]+",alphanumeric="[A-Z $%*+\\-./:]+";let kanji="(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+";kanji=kanji.replace(/u/g,"\\u");const byte="(?:(?![A-Z0-9 $%*+\\-./:]|"+kanji+")(?:.|[\r\n]))+";exports.KANJI=new RegExp(kanji,"g"),exports.BYTE_KANJI=new RegExp("[^A-Z0-9 $%*+\\-./:]+","g"),exports.BYTE=new RegExp(byte,"g"),exports.NUMERIC=new RegExp(numeric,"g"),exports.ALPHANUMERIC=new RegExp(alphanumeric,"g");const TEST_KANJI=new RegExp("^"+kanji+"$"),TEST_NUMERIC=new RegExp("^[0-9]+$"),TEST_ALPHANUMERIC=new RegExp("^[A-Z0-9 $%*+\\-./:]+$");exports.testKanji=function(u){return TEST_KANJI.test(u)},exports.testNumeric=function(u){return TEST_NUMERIC.test(u)},exports.testAlphanumeric=function(u){return TEST_ALPHANUMERIC.test(u)};
//# sourceMappingURL=/sm/842cca015a4025048867731d257f2e42fdf984d2e776f342366d9e691fe4dc36.map