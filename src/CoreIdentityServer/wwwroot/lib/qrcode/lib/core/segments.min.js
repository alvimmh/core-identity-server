/**
 * Minified by jsDelivr using Terser v5.9.0.
 * Original file: /npm/qrcode@1.5.0/lib/core/segments.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
const Mode=require("./mode"),NumericData=require("./numeric-data"),AlphanumericData=require("./alphanumeric-data"),ByteData=require("./byte-data"),KanjiData=require("./kanji-data"),Regex=require("./regex"),Utils=require("./utils"),dijkstra=require("dijkstrajs");function getStringByteLength(e){return unescape(encodeURIComponent(e)).length}function getSegments(e,t,n){const a=[];let o;for(;null!==(o=e.exec(n));)a.push({data:o[0],index:o.index,mode:t,length:o[0].length});return a}function getSegmentsFromString(e){const t=getSegments(Regex.NUMERIC,Mode.NUMERIC,e),n=getSegments(Regex.ALPHANUMERIC,Mode.ALPHANUMERIC,e);let a,o;Utils.isKanjiModeEnabled()?(a=getSegments(Regex.BYTE,Mode.BYTE,e),o=getSegments(Regex.KANJI,Mode.KANJI,e)):(a=getSegments(Regex.BYTE_KANJI,Mode.BYTE,e),o=[]);return t.concat(n,a,o).sort((function(e,t){return e.index-t.index})).map((function(e){return{data:e.data,mode:e.mode,length:e.length}}))}function getSegmentBitsLength(e,t){switch(t){case Mode.NUMERIC:return NumericData.getBitsLength(e);case Mode.ALPHANUMERIC:return AlphanumericData.getBitsLength(e);case Mode.KANJI:return KanjiData.getBitsLength(e);case Mode.BYTE:return ByteData.getBitsLength(e)}}function mergeSegments(e){return e.reduce((function(e,t){const n=e.length-1>=0?e[e.length-1]:null;return n&&n.mode===t.mode?(e[e.length-1].data+=t.data,e):(e.push(t),e)}),[])}function buildNodes(e){const t=[];for(let n=0;n<e.length;n++){const a=e[n];switch(a.mode){case Mode.NUMERIC:t.push([a,{data:a.data,mode:Mode.ALPHANUMERIC,length:a.length},{data:a.data,mode:Mode.BYTE,length:a.length}]);break;case Mode.ALPHANUMERIC:t.push([a,{data:a.data,mode:Mode.BYTE,length:a.length}]);break;case Mode.KANJI:t.push([a,{data:a.data,mode:Mode.BYTE,length:getStringByteLength(a.data)}]);break;case Mode.BYTE:t.push([{data:a.data,mode:Mode.BYTE,length:getStringByteLength(a.data)}])}}return t}function buildGraph(e,t){const n={},a={start:{}};let o=["start"];for(let r=0;r<e.length;r++){const d=e[r],g=[];for(let e=0;e<d.length;e++){const i=d[e],s=""+r+e;g.push(s),n[s]={node:i,lastCount:0},a[s]={};for(let e=0;e<o.length;e++){const r=o[e];n[r]&&n[r].node.mode===i.mode?(a[r][s]=getSegmentBitsLength(n[r].lastCount+i.length,i.mode)-getSegmentBitsLength(n[r].lastCount,i.mode),n[r].lastCount+=i.length):(n[r]&&(n[r].lastCount=i.length),a[r][s]=getSegmentBitsLength(i.length,i.mode)+4+Mode.getCharCountIndicator(i.mode,t))}}o=g}for(let e=0;e<o.length;e++)a[o[e]].end=0;return{map:a,table:n}}function buildSingleSegment(e,t){let n;const a=Mode.getBestModeForData(e);if(n=Mode.from(t,a),n!==Mode.BYTE&&n.bit<a.bit)throw new Error('"'+e+'" cannot be encoded with mode '+Mode.toString(n)+".\n Suggested mode is: "+Mode.toString(a));switch(n!==Mode.KANJI||Utils.isKanjiModeEnabled()||(n=Mode.BYTE),n){case Mode.NUMERIC:return new NumericData(e);case Mode.ALPHANUMERIC:return new AlphanumericData(e);case Mode.KANJI:return new KanjiData(e);case Mode.BYTE:return new ByteData(e)}}exports.fromArray=function(e){return e.reduce((function(e,t){return"string"==typeof t?e.push(buildSingleSegment(t,null)):t.data&&e.push(buildSingleSegment(t.data,t.mode)),e}),[])},exports.fromString=function(e,t){const n=buildGraph(buildNodes(getSegmentsFromString(e,Utils.isKanjiModeEnabled())),t),a=dijkstra.find_path(n.map,"start","end"),o=[];for(let e=1;e<a.length-1;e++)o.push(n.table[a[e]].node);return exports.fromArray(mergeSegments(o))},exports.rawSplit=function(e){return exports.fromArray(getSegmentsFromString(e,Utils.isKanjiModeEnabled()))};
//# sourceMappingURL=/sm/11ad3c40d152c37e883b8ffa0a33552a3a2ffc71a15b62783f9985e1e094c948.map